name: SonarQube Test #name of the workflow
on: #events on which the job is triggered
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: 'Manual Debug Build'

jobs:
  build:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v3

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Clean
        run: ./gradlew clean

      - name: Gradle Lint
        run: ./gradlew lint

      - name: Gradle Build and generating apk files
        run: ./gradlew build

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar


      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Code Scan Analysis - SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew sonarqube -Dsonar.projectKey=AndroidCICD

      - name: Date and Time
        run: echo "::set-output name=current_date_time::$(date +"%d-%m-%Y-%H-%I-%M-%S")"
        id: date

      - name: Copy APK files to a directory
        run: |
            mkdir -p apk-files/debug apk-files/release
            
            cp ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug.apk 
            mv ${{ github.workspace }}/apk-files/debug/app-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug-${{ steps.date.outputs.current_date_time }}.apk
            
            cp ${{ github.workspace }}/app/build/outputs/apk/release/app-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned.apk
            mv ${{ github.workspace }}/apk-files/release/app-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned-${{ steps.date.outputs.current_date_time }}.apk

      - name: Upload apk-files Directory
        uses: actions/upload-artifact@v3
        with:
            name: apk-files-artifactory
            path: ${{ github.workspace }}/apk-files/
            if-no-files-found: ignore

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v2

      - name: Download apk-files Artifactory
        uses: actions/download-artifact@v3
        with:
          name: apk-files-artifactory
          path: ${{ github.workspace }}/apk-files/
      - name: Display structure of downloaded files of Artifact
        run: ls -R
        working-directory: ${{ github.workspace }}/apk-files/

      - name: Public IP of Github Hosted Runner
        id: ip
        uses: haythem/public-ip@v1.3


      #        #The workflow runs an AWS CLI command to authorize the GitHub Actions IP address to access the specified security group on AWS.
      #        #This step is necessary to allow the workflow to communicate with AWS services like EC2 or S3.
      #      - name: Add Github Actions IP to Security group
      #        run: |
      #            aws ec2 authorize-security-group-ingress --group-id ${{ secrets.JFROG_SG_ID }} --protocol tcp --port 8082 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      #        env:
      #            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #            AWS_DEFAULT_REGION: 'us-east-1'

      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Create folders for QA and master branches in apk-files
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
             mkdir -p apk-files/qa
          elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
              mkdir -p apk-files/main
          fi

      - name: List APK files
        run: ls -l app/build/outputs/apk/


      - name: Move APK files to appropriate folders
        run: |
          mv app/build/outputs/apk/debug/app-debug.apk apk-files/main/app-debug-${{ github.run_number }}.apk
          mv app/build/outputs/apk/release/app-release-unsigned.apk apk-files/main/app-release-unsigned-${{ github.run_number }}.apk

      - name: Upload APK files to JFrog Artifactory
        run: |
          jfrog rt u "apk-files/main/*.apk" android-artifact/ --build-name=my-build --build-number=${{ github.run_number }}